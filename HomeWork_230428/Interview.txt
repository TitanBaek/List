1. 선형정렬 3종 구현 원리 조사

선형정렬의

	선택정렬은 배열 내에서 최소 값을 찾아 배열의 맨 앞부분의 값과 Swap하여 배치하고
	그렇게 배치된 값을 제외한 나머지 값들 중에서 최소 값을 찾아 다시 앞으로 배치하는 것을 반복하여 
	배열의 맨 앞 위치부터 마지막 위치까지값들을 점차 Swap해나가는 정렬 방식입니다.

	삽입정렬은 배열 내에 제 위치에 있지 않은 값을 따로 빼놓고 반복문을 돌면서 빼놓은 값이 들어갈 자리를 찾아
	그 위치에 값을 배치하는 정렬 방식입니다. 

	버블정렬은 배열내 값을 두 개씩 꺼내(현재 인덱스와 인덱스+1 위치의 값) 비교하며 두 값 중 작은 값을 좌측, 큰 값을 우측으로 배치하는
	작업을 반복하여 값을 정렬하는 방식입니다.

2. 분할정복정렬 3종 구현 원리 조사

분할정복정렬의 

	힙정렬은 Heap에 '우선순위'와 '데이터 값'을 정렬 시키고자 하는 '배열'의 값으로 Enqueue 해주고
	그렇게 값이 모두 들어간 Heap을 반복문을 통해 Dequeue 하여 배열에 재배치하여 정렬하는 방식입니다.
	
	합병정렬은 배열을 절반으로 나누는 작업을 재귀호출을 통해 반복하고 그렇게 쪼개진 값들을
	서로 비교하여 정렬하는 방식입니다.

	퀵정렬은 반복문을 돌면서 하나의 피벗Index를 기준으로 피벗보다 값이 적으면 피벗의 좌측으로
	값이 크면 피벗의 우측으로 값을 배치해나가는 정렬 방식입니다

3. 분할정복정렬 3종의 원리에 의한 특징 조사
   (힙정렬 특징,병합정렬 특징,퀵정렬 특징)

   힙정렬의 특징으로는
   시간복잡도가 O(nlogn)인 정렬 알고리즘 중에서는 부가적인 메모리가 전혀 필요없다는 게 장점이나 
   데이터 정렬을 완벽히 보장하지 못하기 때문에 안정성에 있어서는 떨어진다.
   완벽 보장을 못하는 이유는 heap의 특성 때문이라고 볼 수 있겠다. int 데이터 정렬의 경우라면 특별히 
   큰 문제가 없겠지만 int 외의 문자 또는 문자열 자료형의 값을 정렬 하고자 할 때에
   중복되는 값을 순서와 상관없이 무작위로 정렬하여 위와 같은 경우가 발생할 수 있다.


   병합정렬의 특징으로는 어떠한 경우에도 시간복잡도는 O(nlog₂n)이며 데이터 정렬에 있어서 높은 정렬 안정성을 가지고 있다.
   최악/최상의 경우에도 O(nlog2n) 이라는 점은 퀵 정렬과 동일하여서 두 방식을 비교했을 때 처리 속도에 있어서 차이가 없을 것 같지만
   퀵 정렬은 병합정렬보다 적은 상수 값을 동작하고 있기 때문에 최악의 경우가 아닐 때에는 퀵정렬이 병합정렬보다 조금 더 빠르다.
   또 추가적인 배열 생성이 필요한 방식이라 추가적인 메모리 할당이 필요하며 데이터가 많을 수록 메모리에 부하가 올 수 있다.
   즉 방대한 데이터의 정렬을 하기에는 적합하지 않은 정렬 방식이라 할 수 있겠다.

   퀵정렬의 특징으로는 병합정렬과 마찬가지로 최악/최상의 경우에도 시간복잡도는 O(nlog2n)이며 
   가장 빠른 처리시간을 자랑하는 정렬 방식이다.
   정렬하고자 하는 배열 내에서 데이터 재배치가 이뤄지는 방식이기 때문에 별도의 메모리 할당이 필요하지 않으나 
   중복되는 데이터에 대한 순서를 보장하지 않기 때문에 불안정 정렬에 속한다.

   안정 정렬 특징 인접 인덱스의 값을 비교

   불안정 정렬 특징 데이터 비교 작업에 있어서 데이터의 이동이 크다.
----------------------------------------------
정렬 구현 시도